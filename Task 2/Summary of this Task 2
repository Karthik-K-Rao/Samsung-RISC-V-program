To execute and debug the sum1ton.c program targeting the RISC-V architecture, begin by verifying the program's correctness using the native GCC compiler with gcc sum1ton.c, ensuring no syntax or logical errors. Subsequently, compile the program for the RISC-V architecture using the cross-compiler with the command riscv64-unknown-elf-gcc -Ofast -mabi=lp64 -march=rv64i -o sum1ton.o sum1ton.c, which generates a RISC-V compatible object file. Execute the compiled program in the Spike simulator by running spike pk sum1ton.o to validate its functionality. For detailed analysis and debugging, invoke Spike in debug mode with spike -d pk sum1ton.o, enabling granular control over execution. Set breakpoints using the until command (e.g., until pc 0 100b0) to halt execution at specific instructions. Inspect register values with commands such as reg 0 a2 to track data flow and modifications. Step through individual instructions using si for precise execution analysis, and monitor changes to critical registers like the stack pointer using reg 0 sp. Additionally, use the riscv64-unknown-elf-objdump utility to disassemble the object file and examine the generated assembly code by running riscv64-unknown-elf-objdump -d sum1ton.o | less. Once debugging and analysis are complete, gracefully exit the Spike debugger with the q command. This comprehensive approach ensures efficient compilation, simulation, and debugging of the RISC-V program in a professional development environment.
